compiler directives
    #include <stdio.h>
    #include <stdlib.h>
    #include <c8051_SDCC.h>
    #include <i2c.h>  

declare constants
    #define RANGER_ADDR 0xE0
    #define COMPASS_ADDR 0xC0
    #define ACCEL_ADDR 0x3A
    #define PING_CM 0x51
    #define PCA_START 28672

    #define SERVO_LEFT_PW 2425
    #define SERVO_CENTER_PW 2895
    #define SERVO_RIGHT_PW 3245
    #define MOTOR_REVERSE_PW 2027 
    #define MOTOR_NEUTRAL_PW 2765
    #define MOTOR_FORWARD_PW 3502

    function prototypes
	Initializations
		void Port_Init(void);
		void PCA_Init (void);
		void XBR0_Init(void);
		void Interrupt_Init(void);
		void ADC_Init();
		void SMB_Init();

	High Level Functions
		void Start_Parameters(void);
		void Set_Motion(void);
		void Set_Neutral(void);
		void Print_Data(void);
	
	Low Level Functions
		void Read_Accel(void);
		void Set_Servo_PWM(void);
		void Set_Motor_PWM(void);
		void Pause(void);
		void Wait(void);
		unsigned int pow(unsigned int a, unsigned char b);
		unsigned int calibrate(void);
		unsigned char parallel_input(void);
		unsigned char read_AD_input(unsigned char pin_number);
		void Calibrate_Accel(void);
		void Buzzer_Sound(void);

global variables
	unsigned char Data[5];  //Data array used to read and write to I2C Bus slaves
	signed long xaccel, yaccel, xoffset=0, yoffset=0, error_sum=0;
	unsigned int initial_speed = MOTOR_NEUTRAL_PW;
	unsigned int PCA_overflows, Servo_PW, Motor_PW;
	unsigned char kdx, kdy, ks, ki; //Feedback gains for x-axis of car, y-axis of car, and steering
	unsigned char keyboard, keypad, accel_count, print_count, wait_count;
	float xpercent ypercent; //Time is in tenths of a second

__bit servo_stop, motor_stop, accel_flag, print_flag, post_start=0; //flags

sbits
	__sbit __at 0xB5 BUZZ; buzzer 
	__sbit __at 0xB6 SS1; servo stop slideswitch
	__sbit __at 0xB7 SS2; motor stop slideswitch
	
main function
    //Call all initialization functions for the chip
    Sys_Init();
    putchar(' ');
    Port_Init();
    XBR0_Init();
    Interrupt_Init();
    PCA_Init();
    SMB_Init();
    ADC_Init();
    Accel_Init_C();

    print begin statement

    //Get user parameters for gain, heading, and speed
    Start_Parameters();

    Begin infinite loop
	while accelerometer gives roughly flat ground readings and while post_start flag hasn't been set
	    call print data
	    read accelerometer
	    set motor in reverse
	set post_start flag

	call print data
	read accelerometer
	call set neutral to determine switch positioning
	call set motion to set servo and motor pw based on accelerometer readings

	while accelerometer gives roughly flat ground readings and while the post_start flag is st
	    set servo to center
	    stop motor

    End infinite loop
End main function


Functions
	XBR0_Init
		Set crossbar to 0x27
	End XBR0_Init

	Port_Init
		P1MDOUT |= 0x05;  Set output pin for CEX0 and CEX2 in push-pull mode
		P1MDOUT &= ~0x80; Set potentiometer pin (P1.7) to open drain
		P1 |= 0x80;	  Set impedance high on P1.7
		P1MDIN &= ~0x80;  Set P1.7 to analog input
	
		P3MDOUT &= ~0xC0; Pin 3.7, 3.8 open drain
    		P3MDOUT |= 0x20;  Pin 3.5 push/pull
		P3 |= 0xC0;       Pin 3.7,3.8 high impedance
	End Port_Init
	
	Interrupt_Init
		Enable PCA interrupts in EIE1
		Enable Global Interrupts
	End Interrupt_Init
	
	PCA_Init
		Use 16 bit counter with SYSCLK/12
		Set CCM0 and CCM2 to 16 bit compare mode 
		Enable PCA counter
	End PCA_Init
	
	ADC_Init
		Set REF0CN to 0x03 to use V_ref of 2.4V
		Enable ADC1
		Wait ~60 ms for capacitors to charge
		Set gain of ADC1 to 1 using ADC1CF
	End ADC_Init
	
	SMB_Init
		Set SCL to 100 kHz
		Enable the SMBus
	End SMB_Init
	
	PCA_ISR __interrupt 9
		if CF is high
		    Set CF low
		    Set PCA start so period is 20 ms
		    increment acccel_count print_count and wait_count
		    
		    if accel_count is greater than or equal to 1 
		        Set accel_flag high
			Zero accel_count
		    if print_count is greater than or equal to 1 
			Set print_flag high
			Zero print_count
		PCA0CN &= 0x40 to handle other interupt sources

	End PCA_ISR __interrupt 9

	Set_Neutral
		If SS1 is ON
			Set Servo_PW to SERVO_CENTER_PW
		If SS2 is ON
			Set Motor_PW to MOTOR_NEUTRAL_PW
		Set CCM0 with Servo_PW;
		Set CCM2 with Motor_PW;
		if SS1 is ON set servo_stop flag high else set low
		if SS1 is ON set motor_stop flag high else set low

	End Set_Neutral
	
	Set_Motion
		Set_Servo_PWM()
		Set_Motor_PWM()
	End Set_Motion
	
	Start_Parameters
		Set Servo_PW to SERVO_CENTER_PW
		Set Motor_PW to MOTOR_NEUTRAL_PW
		Set CCM0 with Servo_PW;
		Set CCM2 with Motor_PW;


		Print starting message to console

		Wait()
		Print calibration for LCD keypad screen
		Wait()
		

		Print instructions to set gain with pot
		Call calculate gain
		set kdy to value from pot
		Print gain to terminal
		Clear lcd
		Print gain to lcd

		Print instructions to set side to side gain
		While gain is not an appropriate value 
		  Call calibrate which returns a 5 digit number from either the keyboard of keypad
		  Wait a second
		
		Print instructions to set steering gain
		While gain is not an appropriate value 
		  Call calibrate which returns a 5 digit number from either the keyboard of keypad
		  Wait a second

		Print instructions to set integral gain constant
		While gain is not an appropriate value 
		  Call calibrate which returns a 5 digit number from either the keyboard of keypad
		  Wait a second
		
		Call calibrate accel 
		Print offsets

	End Start_Parameters
	
	Read_Accel
		initialize counter char i = 0;
		set xoffset to zero
		set yoffset to zero
		for 8 iterations using i as counter
		    while accel flag not high wait
		    set accel flag to zero
		    read 4 bytes starting from reister 28
		    xaccel +=Data[1]<<8 | Data[0]>>4 to set and total x values
		    yaccel +=Data[3]<<8 | Data[2]>>4 to set and total y values
		divide xaccel by 8 and subtract offset
		divide yaccel by 8 and subtract offset
		xpercent equals xaccel divided by 10000
		ypercent equals yaccel divided by 10000

	End Read_Accel

	Calibrate_Accel

	End Calibrate_Accel

	Buzzer_Sound

	End Buzzer_Sound

	Calculate_Gain

	End Calculate_Gain
	
	Print_Data
		if print flag has been set high
		    set print flag low
		    print yaccel, xaccel, kdx, kdy, ks, motor pw to terminal comma separated
		    clear lcd
		    print more descriptively to the lcd

	End Print_Data
	
	Set_Servo_PWM
        	if servo_stop flag is high return without change
		Set Servo_PW to SERVO_CENTER_PW + ks*xaccel where weve set xaccel to a percent for the purpose of scale
		if Servo_PW less than min set to min
		if Servo_PW is graeater than max set to max
		Set CCM0 with Servo_PW
	End Set_Servo_PWM
	
	Set_Motor_PWM
        	if motor_stop flag is high return without change 
		Set error sum to yccel plus the absolute value of xaccel (goes fastest at highest slope)
		Motor_PW = NUETRAL + kdy*yaccel + kdx *abs(xaccel) + ki*error_sum;
		if Motor_PW is less than min set to min
		if Motor_PW is greater than max set to max
		Set CCM2 with Motor_PW
	End Set_Motor_PWM
	
	Pause
		set wait_count (incremented in PCA) to 0
		while wait_count is less than 2
	End Pause
	
	Wait
		set wait_count (incremented in PCA) to 0
		while wait_count is less than 50
	End Wait
	
	pow
        //math function: a^b
		Declare local variables
			unsigned char i
			unsigned char base
			Set base to a
		If b is 0
			return 1
		for i = 1; i < b; i++
			Set a to a*base
		return a 
	End pow
	
	calibrate
		Declare local variables
			unsigned char keypad, keyboard, isPress, pressCheck
			unsigned int value
			Set isPress and pressCheck to 0
			Set value to 0

		Begin infinite loop
            //Read from either keyboard terminal or LCD keypad:
			Set keyboard to getchar_nw()
			Set keypad to read_keypad()

            //Don't overload keypad; pause a little
			Pause()

            //When we get '#' to confirm end of input, done with calibrate:
			If keyboard OR keypad is '#'
				return value

            //Increments pressCheck when keys are released:
			If isPress > pressCheck AND keypad is 0xFF AND keyboard is 0xFF
				Increment pressCheck

            //Got a 6th key pressed then released, reset
			If pressCheck is 6
				Set pressCheck, isPress, and value to 0
				Clear LCD and terminal print screens

            //isPress == pressCheck only when no key held
			If isPress is equal to pressCheck

                //Keypad press:
				If keypad is not 0xFF
					Print keypad character to LCD and terminal
					Set value to value + keypad - '0' multipled by pow(10, 4 - isPress)
					Increment isPress

                //Keyboard press:
				If keyboard is not 0xFF
					Print keyboard character to LCD screen
					Set value to value + keyboard - '0' multipled by pow(10, 4 - isPress)
					Increment isPress
		End infinite loop
	End calibrate
	
	parallel_input
		Declare local variables
			unsigned char keypad, keyboard

		Set keyboard to getchar_nw()
		Set keypad to read_keypad()

        //Don't overload keypad; pause a little
		Pause()

        //If something received, return:
		If keyboard is not 0xFF
			return keyboard
		If keypad is not 0xFF
			return keypad

        //If nothing received, return 0
		else
			return 0
	End parallel_input
	
	read_AD_input
		Set multiplexer pin to be converted
		Clear A/D conversion bit
		Start A/D conversion
		Wait until conversion finishes
		return ADC1
	End read_AD_input
